---
layout: post
title:  "مقدمه ای بر گیت هاب"
permalink: Intro.html
description: مقدمه ای برگیت هاب
date:   2016-04-06 12:50:37 +0430
categories: programming
tags: [jekyll,Introductory , Training]
author_github: Amini
---
## گیت چیست؟
گیت (به انگلیسی: Git) یک نرم‌افزار آزاد و متن‌باز برای بازنگری کد منبع توزیع شده و مدیریت منبع کد است که برروی سرعت تاکید می‌کند. گیت ابتدا برای توسعهٔ لینوکس توسط لینوس تروالدز به وجود آمد و اکنون پروژه‌های فراوانی از آن الهام گرفته‌اند. هر دایرکتوری کاری در گیت یک مخزن کامل با تاریخچهٔ کامل تغییرات و قابلیت بازنگری تغییرات است و برای کار با آن نیازی به دسترسی به شبکه یا سرور مرکزی وجود ندارد. گیت یک نرم‌افزار آزاد است که تحت عنوان جی‌پی‌ال نسخه ۲ توزیع شده است.

[وب سایت های نمونه ساخته شده با جکیل ](https://github.com/jekyll/jekyll/wiki/Sites)


## تاریخچه گیت
توسعهٔ گیت زمانی شروع شد که بسیاری از توسعه‌دهندگان لینوکس، در استفاده از بیت کیپر، که یک سیستم مدیریت کد می‌باشد که قبلاً برای توسعه هستهٔ لینوکس استفاده می‌شد، امتناع ورزیدند. نگهدارندهٔ کپی رایت، لری مک وی، حق استفادهٔ رایگان از این نرم‌افزار را پس از آن که اندرو تریدگل به روش مهندسی معکوس می‌خواست که پروتوکل‌های بیت کیپر را پیاده کند، برداشت. تروالدز نیاز به سیستم توزیع شده‌ای داشت که بتواند از آن همانند بیت کیپر استفاده کند، ولی هیچکدام از نرم‌افزارهای آزاد را مبتنی بر نیازهای خود ندید، به خصوص نیاز او به کارایی بالا.

تا قبل از ۲۰۰۲ برای گسترش کرنل از هیچ نرم‌افزار کنترل نسخه استفاده نمی‌شد و هر فردی که در گسترش کرنل نقش داشت به شکل خصوصی از نرم‌افزارهایی مانند SVN/CVS استفاده می‌کرد و دلیلش آن بود که هیچ‌کدام از نرم‌افزارهای کنترل نسخه این توانایی را نداشتند که حجم تغییراتی که در لینوکس اتفاق میفتادرا پشتیبانی کنند. در این سال لینوس از BitKeeper به عنوان نرم‌افزار کنترل نسخه رسمی لینوکس استفاده کرد که به گسترش دهنده‌های کرنل (هر پروژهی متن باز) اجازه می‌داد به صورت رایگان از BitKeeper استفاده کنند.

در سال ۲۰۰۵ اجازهٔ استفاده رایگان از Bitkeeper برای گسترش دهندگان لینوکس محدود شد (به دلیل انجام مهندسی معکوس روی Bitkeeper) و لینوس شروع به جستجو برای یافتن جایگزینی مناسب کرد. اما نرم‌افزار مناسبی پیدا نکرد که بتواند حجم تغییرات لینوکس را مدیریت کنند و این کمبود سبب شد تا توروالدز به فکر نوشتن یک نرم‌افزار کنترل نسخه بیفتد. توسعه گیت در ماه آوریل سال ۲۰۰۵ آغاز شد و تنها ۲ هفته بعد از شروع توسعه، گیت قادر بود شاخه‌ها (branch) را ادغام (merge) کند. ۲ ماه بعد گیت به عنوان نرم‌افزار کنترل نسخه رسمی برای گسترش لینوکس مورد استفاده قرار گرفت.
## ساختار گیت
در پوشهٔ پایهٔ هر پروژه که با استفاده از گیت مدیریت می‌شود پوشه‌ای با نام git. (نقطه git) وجود دارد که تمامی اطلاعات مربوط به پروژه (تاریخچه، برچسب‌ها، ...) را در خود نگه می‌دارد. این ساختار بر خلاف ساختار سابورژن است که در هر زیرشاخه یک پوشهٔ svn. (نقطه svn) دارد. از جمله پرونده‌هایی که در پوشهٔ git. وجود دارند، config است که تنظیمات مخزن را در خود نگه می‌دارد.
## سایت GitHub دقیقا چیست؟
معمولا GitHub را یک سایت اشتراک کد و ارائه خدمات یا یک شبکه اجتماعی مخصوص برنامه نویسان میدانند. هر دوی آنها میتوانند درست باشند، اما واقعا GitHub چیست؟

در قلب GitHub یک پروژه متن باز که توسط Linus Torvalds (خالق لینوکس) ایجاد شده است به نام Git وجود دارد. در واقع Git یک سیستم کنترل نسخه نرم افزار است. Matthew McCullough یکی از اعضای GitHub میگوید: Git مانند دیگر سیستم های کنترل نسخه، نسخه های نرم افزار را ذخیره، مدیریت و فراخوانی میکند. که البته بیشتر برای کدها استفاده میشود اما Git میتواند برای هر نوع فایل دیگری مانند یک فایل Word نیز استفاده شود.

در GitHub میتوان پروژه ها را تحت عنوان Repository ایجاد کرد. اما GitHub به جز امکان ایجاد repository ویژگی های دیگری مانند خط فرمان، رابط گرافیکی، بوجود آوردن همکاری در repositoryهای مختلف و غیره را میدهد.

در ادامه همراه ما باشید…

یکی از قابلیت های شاخص GitHub کپی کردن یک مخزن (repository) از اکانت کاربر اصلی به اکانت دیگر است که به آن Forking میگویند. سپس کاربر میتواند تغییرات مورد نظر خود را در مخزن ایجاد کند و میتواند تغییرات ایجاد شده را با اطلاع رسانی (pull request) به کاربر اصلی آن مخزن اعلام کند و کاربر اصلی میتواند با یک کلیک تغییرات را به مخزن اصلی منتقل کند (merge).

این سه ویژگی fork, pull request و merge هستند که GitHub را قدرتمند میکند. در گذشته برای اینکه یک کاربر بتواند تغییراتی را در یک پروژه متن باز ایجاد کند باید ابتدا آن را دانلود میکرد، سپس تغییرات لازم را اعمال کند، بعد از آن لیستی از تغییرات را به نام patch ایجاد و همراه پروژه به کاربر اصلی آن میفرستد. کاربر اصلی ابتدا باید به کاربر غریبه اعتماد کند سپس patch را مشاهده و در صورت درست بودن تغییرات را اعمال کند.

اما در GitHub زمانی که یک pull request رخ میدهد، کاربر اصلی میتواند پروفایل درخواست دهنده را ببینید و در صورت تایید(merge) به اعتبار درخواست کننده اضافه میشود. این اعتبار میتواند به عنوان یک روزمه شناخته شود.

سایت GitHub دارای ویژگی های دیگری نیز هست. اگر بر روی پروژه های متن باز کار میکنید GitHub اولین قدم مهم است که باید بردارید. بدست آوردن اعتبار و شهرت در دنیای برنامه نویسی با استفاده از GitHub امکان پذیر است.

